{"version":3,"sources":["components/Viewer.Components/Extensions/Dynamic/Viewing.Extension.ModelTransformer/Translate.Command/Translate.Command.js","components/Viewer.Components/Extensions/Dynamic/Viewing.Extension.ModelTransformer/Translate.Command/index.js","components/Viewer.Components/Viewer.Command/Viewer.Command.Tool.js","components/Viewer.Components/Viewer.Command/Viewer.Command.js","components/Viewer.Components/Viewer.Command/index.js"],"names":["TranslateCommand","viewer","_this","options","arguments","length","undefined","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","objectSpread","commandId","defineProperty","assertThisInitialized","TxControl","update","event","dragging","pointerDown","onPointerDown","selection","hitTest","clientToWorld","canvasX","canvasY","hitPoint","copy","intersectPoint","onPointerUp","handled","onPointerMove","onPointerHover","impl","sceneUpdated","keyCode","deactivate","visible","model","pos","TxMesh","position","translation","THREE","Vector3","x","offset","y","z","fragIds","selectedFragments","map","fragment","updateAnimTransform","fragId","emit","transform","commandTool","on","onButtonDown","onMouseMove","onButtonUp","onKeyDown","fullTransform","mesh","Mesh","SphereGeometry","set","bbox","getBoundingBox","createOverlayScene","TransformControls","camera","canvas","setSize","getBoundingSphere","radius","addOverlay","createTransformMesh","attach","clearSelection","selections","hideControl","modelTransform","setPosition","addEventListener","onTxChange","Autodesk","Viewing","CAMERA_CHANGE_EVENT","onCameraChanged","it","getData","instanceTree","fragIdsArray","dbIdArray","getRootId","getFragIds","_this2","getFragmentProxy","getAnimTransform","removeEventListener","ViewerCommand","Command","CommandTool","toolName","toolController","registerTool","active","activateTool","deactivateTool","off","deregisterTool","button","EventsEmitter","tool","activate","onActivate","onDeactivate","control","parentControl","removeControl","unregister","id","className","tooltip","handler","UI","Button","icon","style","fontSize","setToolTip","onClick","createButton","caption","viewerToolbar","getToolbar","ControlGroup","addControl"],"mappings":"uLAEqBA,cAMnB,SAAAA,EAAaC,GAAsB,IAAAC,EAAdC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAI,OAAAG,OAAAC,EAAA,EAAAD,CAAAE,KAAAT,GAEjCE,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAP,GAAAY,KAAAH,KAAOR,EAAPM,OAAAM,EAAA,EAAAN,CAAA,GACKJ,EADL,CAEEW,UAAW,gBAJoBP,OAAAQ,EAAA,EAAAR,QAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,IAAA,kBA6EjB,WACZA,EAAKe,WACPf,EAAKe,UAAUC,WA/EgBX,OAAAQ,EAAA,EAAAR,QAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,IAAA,eAuFpB,SAACiB,GAMd,GAJAjB,EAAKkB,UAAW,EAEhBlB,EAAKmB,YAAcnB,EAAKe,UAAUK,cAAcH,GAE5CjB,EAAKmB,aAAenB,EAAKqB,UAC3B,OAAO,EAET,IAAMC,EAAUtB,EAAKD,OAAOwB,cAC1BN,EAAMO,QACNP,EAAMQ,SACN,GAMF,OAJIH,GACFtB,EAAK0B,SAASC,KAAKL,EAAQM,iBAGtB,IAzG0BvB,OAAAQ,EAAA,EAAAR,QAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,IAAA,aAgHtB,SAACiB,GAIZ,OAFAjB,EAAKkB,UAAW,IAEZlB,EAAKe,UAAUc,YAAYZ,KApHEZ,OAAAQ,EAAA,EAAAR,QAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,IAAA,cA8HrB,SAACiB,GAEb,IAAMa,EAAU9B,EAAKkB,SACjBlB,EAAKe,UAAUgB,cAAcd,GAC7BjB,EAAKe,UAAUiB,eAAef,GAMlC,OAJIa,GACF9B,EAAKD,OAAOkC,KAAKC,cAAa,GAGzBJ,IAxI0BzB,OAAAQ,EAAA,EAAAR,QAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,IAAA,YA+IvB,SAACiB,EAAOkB,GAKlB,OAHgB,KAAZA,GACFnC,EAAKoC,cAEA,IApJ0B/B,OAAAQ,EAAA,EAAAR,QAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,IAAA,aA2JtB,WAEX,GAAIA,EAAKkB,UAAYlB,EAAKe,UAAUsB,QAAS,CAE3C,IAAMC,EAAQtC,EAAKqB,UAAUiB,MAEvBC,EAAMvC,EAAKwC,OAAOC,SAElBC,EAAc,IAAIC,MAAMC,QAC5BL,EAAIM,EAAIP,EAAMQ,OAAOD,EACrBN,EAAIQ,EAAIT,EAAMQ,OAAOC,EACrBR,EAAIS,EAAIV,EAAMQ,OAAOE,GAEjBC,EACJjD,EAAKkD,kBAAkBC,IAAI,SAACC,GAS1B,OAPAA,EAASX,SAAW,IAAIE,MAAMC,QAC5BL,EAAIM,EAAIO,EAASN,OAAOD,EACxBN,EAAIQ,EAAIK,EAASN,OAAOC,EACxBR,EAAIS,EAAII,EAASN,OAAOE,GAE1BI,EAASC,sBAEFD,EAASE,SAGpBtD,EAAKD,OAAOkC,KAAKC,cAAa,GAE9BlC,EAAKuD,KAAK,YAAa,CACrBC,UAAW,CACTd,eAEFO,UACAX,aArLJtC,EAAKyD,YAAYC,GAAG,aAAc1D,EAAK2D,cACvC3D,EAAKyD,YAAYC,GAAG,YAAa1D,EAAK4D,aACtC5D,EAAKyD,YAAYC,GAAG,WAAY1D,EAAK6D,YACrC7D,EAAKyD,YAAYC,GAAG,UAAW1D,EAAK8D,WAEpC9D,EAAK+D,cAAgB9D,EAAQ8D,cAC7B/D,EAAK0B,SAAW,IAAIiB,MAAMC,QAC1B5C,EAAKkD,kBAAoB,GACzBlD,EAAKqB,UAAY,KACjBrB,EAAKkB,SAAW,KAhBiBlB,qFAyBjC,IAAMgE,EAAO,IAAIrB,MAAMsB,KACrB,IAAItB,MAAMuB,eAAe,KAAQ,IAInC,OAFAF,EAAKvB,SAAS0B,IAAI,EAAG,EAAG,GAEjBH,uCASP,IAAMI,EAAO7D,KAAKR,OAAOuC,MAAM+B,iBAE/B9D,KAAKR,OAAOkC,KAAKqC,mBACf,wBAEF/D,KAAKQ,UAAY,IAAI4B,MAAM4B,kBACzBhE,KAAKR,OAAOkC,KAAKuC,OACjBjE,KAAKR,OAAOkC,KAAKwC,OACjB,aAEFlE,KAAKQ,UAAU2D,QACqB,EAAlCN,EAAKO,oBAAoBC,QAE3BrE,KAAKQ,UAAUsB,SAAU,EAEzB9B,KAAKR,OAAOkC,KAAK4C,WACf,uBACAtE,KAAKQ,WAEPR,KAAKiC,OAASjC,KAAKuE,sBAEnBvE,KAAKQ,UAAUgE,OACbxE,KAAKiC,+CASPjC,KAAKR,OAAOiF,8FA+HM/D,yFAEbA,EAAMgE,WAAW9E,gDACbI,KAAK2E,yBAGd3E,KAAKc,UAAYJ,EAAMgE,WAAW,GAElC1E,KAAK2C,kBAAoB,GAEnBZ,EAAQ/B,KAAKc,UAAUiB,MAEvB6C,EAAiB7C,EAAMkB,WAAa,CACxCd,YAAa,CAAEG,EAAE,EAAGE,EAAE,EAAGC,EAAE,IAG7BV,EAAMQ,OAAS,CACbD,EAAGtC,KAAKmB,SAASmB,EAAIsC,EAAezC,YAAYG,EAChDE,EAAGxC,KAAKmB,SAASqB,EAAIoC,EAAezC,YAAYK,EAChDC,EAAGzC,KAAKmB,SAASsB,EAAImC,EAAezC,YAAYM,GAGlDzC,KAAKQ,UAAUsB,SAAU,EAEzB9B,KAAKQ,UAAUqE,YACb7E,KAAKmB,UAEPnB,KAAKQ,UAAUsE,iBACb,SAAU9E,KAAK+E,YAEjB/E,KAAKR,OAAOsF,iBACVE,SAASC,QAAQC,oBACjBlF,KAAKmF,iBAEHnF,KAAKwD,gBAED4B,EAAKrD,EAAMsD,UAAUC,aAE3BtF,KAAKc,UAAUyE,aAAe,GAE9BvF,KAAKc,UAAU0E,UAAY,CACzBJ,EAAGK,cAIUzF,KAAKc,UAAUyE,aAAa3F,yCACnC8F,WAAW3D,EAAO/B,KAAKc,UAAU0E,4DACvCxF,KAAKc,UAAUyE,qBAFb7C,OAIN1C,KAAK2C,kBAAoBD,EAAQE,IAAI,SAACG,GAEpC,IAAMF,EAAW8C,EAAKnG,OAAOkC,KAAKkE,iBAChC7D,EAAOgB,GAUT,OARAF,EAASgD,mBAEThD,EAASN,OAAS,CAChBD,EAAGqD,EAAKxE,SAASmB,EAAIO,EAASX,SAASI,EACvCE,EAAGmD,EAAKxE,SAASqB,EAAIK,EAASX,SAASM,EACvCC,EAAGkD,EAAKxE,SAASsB,EAAII,EAASX,SAASO,GAGlCI,IAGT7C,KAAKR,OAAOkC,KAAKC,cAAa,6IAS9B3B,KAAKR,OAAOsG,oBACVd,SAASC,QAAQC,oBACjBlF,KAAKmF,iBAEHnF,KAAKQ,YAEPR,KAAKQ,UAAUsF,oBACb,SAAU9F,KAAK+E,YAEjB/E,KAAKQ,UAAUsB,SAAU,EAEzB9B,KAAK2C,kBAAoB,GAEzB3C,KAAKR,OAAOkC,KAAKC,cAAa,IAGhC3B,KAAKc,UAAY,KAEjBd,KAAKgD,KAAK,YAAa,uFAePQ,GAEhBxD,KAAKwD,cAAgBA,EAErBxD,KAAKR,OAAOiF,+BA1T8BsB,GCA/BC,oGCAMC,cAEnB,SAAAA,EAAazG,GAAsB,IAAAC,EAAdC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAI,OAAAG,OAAAC,EAAA,EAAAD,CAAAE,KAAAiG,IAEjCxG,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmG,GAAA9F,KAAAH,QAEKkG,SAAWxG,EAAQW,UAExBb,EAAO2G,eAAeC,aAAtBtG,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,KAEAA,EAAKC,QAAUA,EAEfD,EAAKD,OAASA,EAVmBC,0EAmBjC,MAAO,CAACO,KAAKkG,4CASb,OAAOlG,KAAKkG,4CASPlG,KAAKqG,SAERrG,KAAKqG,QAAS,EAEdrG,KAAKR,OAAO2G,eAAeG,aACzBtG,KAAKkG,UAEPlG,KAAKgD,KAAK,WAAYhD,4CAUpBA,KAAKqG,SAEPrG,KAAKqG,QAAS,EAEdrG,KAAKR,OAAO2G,eAAeI,eACzBvG,KAAKkG,UAEPlG,KAAKgD,KAAK,aAAchD,4CAU1BA,KAAK6B,aAEL7B,KAAKwG,MAELxG,KAAKR,OAAO2G,eAAeM,eAAezG,gDAOzBU,EAAOgG,GAExB,OAAO1G,KAAKgD,KAAK,cAAetC,EAAOgG,2CAOxBhG,GAEf,OAAOV,KAAKgD,KAAK,YAAatC,yCAOjBA,EAAOkB,GAEpB,OAAO5B,KAAKgD,KAAK,UAAWtC,EAAOkB,uCAOxBlB,EAAOkB,GAElB,OAAO5B,KAAKgD,KAAK,QAAStC,EAAOkB,4CAOjBlB,EAAOkB,GAEvB,OAAO5B,KAAKgD,KAAK,aAActC,EAAOkB,0CAOxBlB,EAAOkB,GAErB,OAAO5B,KAAKgD,KAAK,WAAYtC,EAAOkB,UAnIC+E,KCCpBZ,cAEnB,SAAAA,EAAavG,GAAsB,IAAAC,EAAdC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAI,OAAAG,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IAEjCtG,EAAAK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiG,GAAA5F,KAAAH,QAEKkD,YAAc,IAAI+C,EAAYzG,EAAQE,GAE3CD,EAAKyD,YAAYC,GAAG,WAAY,SAACyD,GAE/BnH,EAAKuD,KAAK,mBAAVlD,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,OAGFA,EAAKyD,YAAYC,GAAG,aAAc,SAACyD,GAEjCnH,EAAKuD,KAAK,qBAAVlD,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAL,OAGFA,EAAKY,UAAYX,EAAQW,UAEzBZ,EAAKC,QAAUA,EAEfD,EAAKD,OAASA,EApBmBC,0EAsC5BO,KAAKkD,YAAYmD,SAEpBrG,KAAKkD,YAAY2D,WAEjB7G,KAAK8G,yFAcH9G,KAAKkD,YAAYmD,SAEnBrG,KAAKkD,YAAYrB,aAEjB7B,KAAK+G,4FAcH/G,KAAKgH,SACPhH,KAAKN,QAAQuH,cAAcC,cACzBlH,KAAKgH,SAGThH,KAAKkD,YAAYiE,aAEjBnH,KAAKwG,uCASLxG,KAAKqG,OACHrG,KAAK6B,aACL7B,KAAK6G,gDAOIO,EAAIC,EAAWC,EAASC,GAEnC,IAAMb,EAAS,IAAI1B,SAASC,QAAQuC,GAAGC,OAAOL,GAU9C,OARAV,EAAOgB,KAAKC,MAAMC,SAAW,OAE7BlB,EAAOgB,KAAKL,UAAYA,EAExBX,EAAOmB,WAAWP,GAElBZ,EAAOoB,QAAUP,EAEVb,8CAOYhH,GAEnB,IAAMsH,EAAUhH,KAAK+H,aACnBrI,EAAQ0H,GACR1H,EAAQgI,KACRhI,EAAQsI,QACRtI,EAAQ6H,SAENN,EAAgBvH,EAAQuH,cAE5B,IAAKA,EAAe,CAElB,IAAMgB,EAAgBjI,KAAKR,OAAO0I,YAAW,GAE7CjB,EAAgB,IAAIjC,SAASC,QAAQuC,GAAGW,aACtCzI,EAAQ0H,IAEVa,EAAcG,WAAWnB,GAK3B,OAFAA,EAAcmB,WAAWpB,GAElBA,iCA/GP,OAAOhH,KAAKkD,YAAYmD,cA/BeM,KCD5BZ","file":"static/js/15.3ad4fe4d.chunk.js","sourcesContent":["import ViewerCommand from 'Viewer.Command'\n\nexport default class TranslateCommand extends ViewerCommand {\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  constructor (viewer, options = {}) {\n\n    super (viewer, {\n      ...options,\n      commandId: 'Translate'\n    })\n\n    this.commandTool.on('buttondown', this.onButtonDown)\n    this.commandTool.on('mousemove', this.onMouseMove)\n    this.commandTool.on('buttonup', this.onButtonUp)\n    this.commandTool.on('keydown', this.onKeyDown)\n\n    this.fullTransform = options.fullTransform\n    this.hitPoint = new THREE.Vector3()\n    this.selectedFragments = []\n    this.selection = null\n    this.dragging = null\n  }\n\n  /////////////////////////////////////////////////////////\n  // Creates a dummy mesh to attach control to\n  //\n  /////////////////////////////////////////////////////////\n  createTransformMesh() {\n\n    const mesh = new THREE.Mesh(\n      new THREE.SphereGeometry(0.0001, 5))\n\n    mesh.position.set(0, 0, 0)\n\n    return mesh\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onActivate() {\n  \n    const bbox = this.viewer.model.getBoundingBox()\n\n    this.viewer.impl.createOverlayScene(\n      'TranslateToolOverlay')\n\n    this.TxControl = new THREE.TransformControls(\n      this.viewer.impl.camera,\n      this.viewer.impl.canvas,\n      \"translate\")\n\n    this.TxControl.setSize(\n      bbox.getBoundingSphere().radius * 5)\n\n    this.TxControl.visible = false\n\n    this.viewer.impl.addOverlay(\n      'TranslateToolOverlay',\n      this.TxControl)\n\n    this.TxMesh = this.createTransformMesh()\n\n    this.TxControl.attach(\n      this.TxMesh)\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onDeactivate() {\n  \n    this.viewer.clearSelection()\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onCameraChanged = () => {\n    if (this.TxControl) {\n      this.TxControl.update()\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onButtonDown = (event) => {\n\n    this.dragging = true\n\n    this.pointerDown = this.TxControl.onPointerDown(event)\n\n    if (this.pointerDown && this.selection)\n      return true\n\n    const hitTest = this.viewer.clientToWorld(\n      event.canvasX,\n      event.canvasY,\n      true)\n\n    if (hitTest) {\n      this.hitPoint.copy(hitTest.intersectPoint)\n    }\n\n    return false\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onButtonUp = (event) => {\n\n    this.dragging = false\n\n    if (this.TxControl.onPointerUp(event))\n      return true\n\n    return false\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onMouseMove = (event) => {\n\n    const handled = this.dragging \n      ? this.TxControl.onPointerMove(event)\n      : this.TxControl.onPointerHover(event)\n    \n    if (handled) {\n      this.viewer.impl.sceneUpdated(true)\n    }\n\n    return handled\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onKeyDown = (event, keyCode) => {\n\n    if (keyCode === 27) { //ESC\n      this.deactivate()\n    }\n    return false\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onTxChange = () => {\n\n    if (this.dragging && this.TxControl.visible) {\n\n      const model = this.selection.model\n\n      const pos = this.TxMesh.position\n\n      const translation = new THREE.Vector3(\n        pos.x - model.offset.x,\n        pos.y - model.offset.y,\n        pos.z - model.offset.z)\n\n      const fragIds = \n        this.selectedFragments.map((fragment) => {\n\n          fragment.position = new THREE.Vector3(\n            pos.x - fragment.offset.x,\n            pos.y - fragment.offset.y,\n            pos.z - fragment.offset.z)\n\n          fragment.updateAnimTransform()\n\n          return fragment.fragId\n      })\n\n      this.viewer.impl.sceneUpdated(true)\n\n      this.emit('transform', {\n        transform: {\n          translation\n        },\n        fragIds,\n        model\n      })\n    }\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  async setSelection (event) {\n\n    if (!event.selections.length) {\n      return this.hideControl()\n    }\n\n    this.selection = event.selections[0]\n\n    this.selectedFragments = []\n\n    const model = this.selection.model\n\n    const modelTransform = model.transform || { \n      translation: { x:0, y:0, z:0 } \n    }\n\n    model.offset = {\n      x: this.hitPoint.x - modelTransform.translation.x,\n      y: this.hitPoint.y - modelTransform.translation.y,\n      z: this.hitPoint.z - modelTransform.translation.z\n    }\n\n    this.TxControl.visible = true\n\n    this.TxControl.setPosition(\n      this.hitPoint)\n\n    this.TxControl.addEventListener(\n      'change', this.onTxChange)\n\n    this.viewer.addEventListener(\n      Autodesk.Viewing.CAMERA_CHANGE_EVENT,\n      this.onCameraChanged)\n\n    if (this.fullTransform) {\n\n      const it = model.getData().instanceTree\n\n      this.selection.fragIdsArray = []\n\n      this.selection.dbIdArray = [\n        it.getRootId()\n      ]\n    }\n\n    const fragIds = !this.selection.fragIdsArray.length\n      ? await getFragIds(model, this.selection.dbIdArray)\n      : this.selection.fragIdsArray\n\n    this.selectedFragments = fragIds.map((fragId) => {\n\n      const fragment = this.viewer.impl.getFragmentProxy(\n        model, fragId)\n\n      fragment.getAnimTransform()\n\n      fragment.offset = {\n        x: this.hitPoint.x - fragment.position.x,\n        y: this.hitPoint.y - fragment.position.y,\n        z: this.hitPoint.z - fragment.position.z\n      }\n\n      return fragment\n    })\n\n    this.viewer.impl.sceneUpdated(true)\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  hideControl () {\n   \n    this.viewer.removeEventListener(\n      Autodesk.Viewing.CAMERA_CHANGE_EVENT,\n      this.onCameraChanged)\n\n    if (this.TxControl) {\n\n      this.TxControl.removeEventListener(\n        'change', this.onTxChange)\n  \n      this.TxControl.visible = false\n  \n      this.selectedFragments = []\n\n      this.viewer.impl.sceneUpdated(true)\n    }\n    \n    this.selection = null\n\n    this.emit('selection', null)\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  pickPosition () {\n\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  setFullTransform (fullTransform) {\n\n    this.fullTransform = fullTransform\n\n    this.viewer.clearSelection()\n  }\n}\n\n\n","import Command from './Translate.Command'\n\nexport default Command\n","import EventsEmitter from 'EventsEmitter'\n\nexport default class CommandTool extends EventsEmitter {\n\n  constructor (viewer, options = {}) {\n\n    super ()\n\n    this.toolName = options.commandId\n\n    viewer.toolController.registerTool(this)\n\n    this.options = options\n\n    this.viewer = viewer\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Tool names\n  //\n  /////////////////////////////////////////////////////////////////\n  getNames () {\n\n    return [this.toolName]\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Tool name\n  //\n  /////////////////////////////////////////////////////////////////\n  getName () {\n\n    return this.toolName\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Activate Tool\n  //\n  /////////////////////////////////////////////////////////////////\n  activate () {\n\n    if (!this.active) {\n\n      this.active = true\n\n      this.viewer.toolController.activateTool(\n        this.toolName)\n\n      this.emit('activate', this)\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Deactivate tool\n  //\n  /////////////////////////////////////////////////////////////////\n  deactivate () {\n\n    if (this.active) {\n\n      this.active = false\n\n      this.viewer.toolController.deactivateTool(\n        this.toolName)\n\n      this.emit('deactivate', this)\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////////////\n  unregister () {\n\n    this.deactivate ()\n\n    this.off()\n\n    this.viewer.toolController.deregisterTool(this)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleSingleClick (event, button) {\n\n    return this.emit('singleclick', event, button)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleMouseMove (event) {\n\n    return this.emit('mousemove', event)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleKeyDown (event, keyCode) {\n\n    return this.emit('keydown', event, keyCode)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleKeyUp (event, keyCode) {\n\n    return this.emit('keyup', event, keyCode)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleButtonDown (event, keyCode) {\n\n    return this.emit('buttondown', event, keyCode)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleButtonUp (event, keyCode) {\n\n    return this.emit('buttonup', event, keyCode)\n  }\n}\n","import CommandTool from './Viewer.Command.Tool'\nimport EventsEmitter from 'EventsEmitter'\n\nexport default class ViewerCommand extends EventsEmitter {\n\n  constructor (viewer, options = {}) {\n\n    super ()\n\n    this.commandTool = new CommandTool(viewer, options)\n\n    this.commandTool.on('activate', (tool) => {\n\n      this.emit('command.activate', this)\n    })\n\n    this.commandTool.on('deactivate', (tool) => {\n\n      this.emit('command.deactivate', this)\n    })\n\n    this.commandId = options.commandId\n\n    this.options = options\n\n    this.viewer = viewer\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  get active () {\n\n    return this.commandTool.active \n  }\n  \n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  activate () {\n\n    if (!this.commandTool.active) {\n\n      this.commandTool.activate()\n\n      this.onActivate()\n    }\n  }\n\n  onActivate () {\n\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  deactivate () {\n\n    if (this.commandTool.active) {\n\n      this.commandTool.deactivate()\n\n      this.onDeactivate()\n    }\n  }\n\n  onDeactivate () {\n    \n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  terminate () {\n\n    if (this.control) {\n      this.options.parentControl.removeControl(\n        this.control)\n    }\n\n    this.commandTool.unregister()\n     \n    this.off()\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  toggle () {\n\n    this.active\n    ? this.deactivate()\n    : this.activate()\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  createButton(id, className, tooltip, handler) {\n\n    const button = new Autodesk.Viewing.UI.Button(id)\n\n    button.icon.style.fontSize = '24px'\n\n    button.icon.className = className\n\n    button.setToolTip(tooltip)\n\n    button.onClick = handler\n\n    return button\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  createButtonControl (options) {\n\n    const control = this.createButton(\n      options.id,\n      options.icon,\n      options.caption,\n      options.handler)\n\n    var parentControl = options.parentControl\n\n    if (!parentControl) {\n\n      const viewerToolbar = this.viewer.getToolbar(true)\n\n      parentControl = new Autodesk.Viewing.UI.ControlGroup(\n        options.id)\n\n      viewerToolbar.addControl(parentControl)\n    }\n\n    parentControl.addControl(control)\n\n    return control\n  }\n}\n","import ViewerCommand from './Viewer.Command'\n\nexport default ViewerCommand\n"],"sourceRoot":""}