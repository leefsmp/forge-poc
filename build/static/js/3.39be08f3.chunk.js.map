{"version":3,"sources":["components/Viewer.Components/Extensions/Dynamic/Viewing.Extension.ModelTransformer/Rotate.Command/Rotate.Control.js","components/Viewer.Components/Extensions/Dynamic/Viewing.Extension.ModelTransformer/Rotate.Command/Rotate.Command.js","components/Viewer.Components/Extensions/Dynamic/Viewing.Extension.ModelTransformer/Rotate.Command/index.js","components/Viewer.Components/Viewer.Command/Viewer.Command.Tool.js","components/Viewer.Components/Viewer.Command/Viewer.Command.js","components/Viewer.Components/Viewer.Command/index.js"],"names":["RotateControl","viewer","center","size","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","engaged","overlayScene","domElement","impl","canvas","camera","gizmos","createOverlayScene","createAxis","THREE","Vector3","worldup","y","push","createGizmo","Euler","Math","PI","picker","createSphere","material","LineBasicMaterial","color","linewidth","depthTest","depthWrite","transparent","angleLine","createLine","sceneUpdated","start","end","geometry","Geometry","vertices","x","z","line","Line","addOverlay","dir","length","normalize","orientation","Matrix4","lookAt","Object3D","up","matrix","set","multiply","CylinderGeometry","cone","Mesh","applyMatrix","position","createCone","euler","radius","range","axis","GizmoMaterial","subMaterial","torusGizmo","TorusGeometry","subTorus","highlight","transform","q","Quaternion","setFromEuler","s","compose","plane","createBox","visible","subGizmo","w","h","d","BoxGeometry","box","SphereGeometry","sphere","pointer","pointerVector","pointerDir","ray","Raycaster","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","isPerspective","unproject","sub","transformDirection","matrixWorld","event","pointers","button","intersectResults","pointerToRaycaster","intersectObjects","forEach","gizmo","selectedGizmo","object","copy","point","lastDir","verticesNeedUpdate","cross","crossVectors","sign","dot","emit","angle","angleTo","pickerPoint","_this2","setTimeout","screenPoint","viewport","navigation","getScreenViewport","worldPoint","normal","dist","removeOverlayScene","EventsEmitter","parameters","_this3","setValues","colorInit","clone","opacityInit","opacity","side","FrontSide","highlighted","setRGB","MeshBasicMaterial","RotateCommand","options","arguments","undefined","objectSpread","commandId","defineProperty","assertThisInitialized","rotateControl","onPointerDown","keys","Control","dragging","mousePos","onPointerUp","onPointerHover","selection","offset","sqrt","sidewaysDirection","moveDirection","eyeDirection","upDirection","getCamera","eye","target","setLength","add","rotateFragments","model","fragIdsArray","keyCode","key","deactivate","commandTool","on","onButtonDown","onMouseMove","onButtonUp","onKeyDown","onKeyUp","fullTransform","clearSelection","select","dbIdArray","selections","hideControl","fragCount","getFragmentList","fragments","fragId2dbId","fragId","it","getData","instanceTree","getRootId","drawControl","fitToView","preserveViewerSelection","remove","getWorldBoundingBox","bbox","min","max","data","fragIds","quaternion","setFromAxisAngle","idx","fragProxy","getFragmentProxy","getAnimTransform","applyQuaternion","multiplyQuaternions","setFromQuaternion","dbIds","rotation","updateAnimTransform","ViewerCommand","Command","CommandTool","toolName","toolController","registerTool","active","activateTool","deactivateTool","off","deregisterTool","tool","activate","onActivate","onDeactivate","control","parentControl","removeControl","unregister","id","className","tooltip","handler","Autodesk","Viewing","UI","Button","icon","style","fontSize","setToolTip","onClick","createButton","caption","viewerToolbar","getToolbar","ControlGroup","addControl"],"mappings":"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","file":"static/js/3.39be08f3.chunk.js","sourcesContent":["import EventsEmitter from 'EventsEmitter'\n\nexport default class RotateControl extends EventsEmitter {\n\n  constructor (viewer, center, size) {\n\n    super()\n\n    this.engaged = false\n\n    this.overlayScene = 'rotateControlScene'\n    this.domElement = viewer.impl.canvas\n    this.camera = viewer.impl.camera\n    this.viewer = viewer\n    this.center = center\n    this.size = size\n    this.gizmos = []\n\n    this.viewer.impl.createOverlayScene(\n      this.overlayScene)\n\n    this.createAxis(\n      center, new THREE.Vector3(1, 0, 0),\n      size * 0.85, 0xFF0000)\n\n    this.createAxis(\n      center, new THREE.Vector3(0, 1, 0),\n      size * 0.85, 0x00FF00)\n\n    this.createAxis(\n      center, new THREE.Vector3(0, 0, 1),\n      size * 0.85, 0x0000FF)\n\n    // World UP = Y\n\n    if (this.camera.worldup.y) {\n\n      this.gizmos.push(this.createGizmo(\n        center,\n        new THREE.Euler(0, Math.PI / 2, 0),\n        size * 0.0045,\n        size * 0.8, 0xFF0000,\n        Math.PI,\n        new THREE.Vector3(1, 0, 0)))\n\n      this.gizmos.push(this.createGizmo(\n        center,\n        new THREE.Euler(Math.PI / 2, 0, 0),\n        size * 0.0045,\n        size * 0.8, 0x00FF00,\n        2 * Math.PI,\n        new THREE.Vector3(0, 1, 0)))\n\n      this.gizmos.push(this.createGizmo(\n        center,\n        new THREE.Euler(0, 0, 0),\n        size * 0.0045,\n        size * 0.8, 0x0000FF,\n        Math.PI,\n        new THREE.Vector3(0, 0, 1)))\n\n    } else {\n\n      // World UP = Z\n\n      this.gizmos.push(this.createGizmo(\n        center,\n        new THREE.Euler(Math.PI / 2, Math.PI / 2, 0),\n        size * 0.0045,\n        size * 0.8, 0xFF0000,\n        Math.PI,\n        new THREE.Vector3(1, 0, 0)))\n\n      this.gizmos.push(this.createGizmo(\n        center,\n        new THREE.Euler(Math.PI / 2, 0, 0),\n        size * 0.0045,\n        size * 0.8, 0x00FF00,\n        Math.PI,\n        new THREE.Vector3(0, 1, 0)))\n\n      this.gizmos.push(this.createGizmo(\n        center,\n        new THREE.Euler(0, 0, 0),\n        size * 0.0045,\n        size * 0.8, 0x0000FF,\n        2 * Math.PI,\n        new THREE.Vector3(0, 0, 1)))\n    }\n\n    this.picker = this.createSphere(\n      size * 0.02)\n\n    var material = new THREE.LineBasicMaterial({\n      color: 0xFFFF00,\n      linewidth: 1,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    })\n\n    this.angleLine =\n      this.createLine(\n        this.center,\n        this.center,\n        material)\n\n    viewer.impl.sceneUpdated(true)\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Draw a line\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  createLine (start, end, material) {\n\n    var geometry = new THREE.Geometry()\n\n    geometry.vertices.push(new THREE.Vector3(\n      start.x, start.y, start.z))\n\n    geometry.vertices.push(new THREE.Vector3(\n      end.x, end.y, end.z))\n\n    var line = new THREE.Line(geometry, material)\n\n    this.viewer.impl.addOverlay(\n      this.overlayScene, line)\n\n    return line\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Draw a cone\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  createCone (start, dir, length, material) {\n\n    dir.normalize()\n\n    var end = {\n      x: start.x + dir.x * length,\n      y: start.y + dir.y * length,\n      z: start.z + dir.z * length\n    }\n\n    var orientation = new THREE.Matrix4()\n\n    orientation.lookAt(\n      start,\n      end,\n      new THREE.Object3D().up)\n\n    var matrix = new THREE.Matrix4()\n\n    matrix.set(\n      1, 0, 0, 0,\n      0, 0, 1, 0,\n      0, -1, 0, 0,\n      0, 0, 0, 1)\n\n    orientation.multiply(matrix)\n\n    var geometry = new THREE.CylinderGeometry(\n      0, length * 0.2, length, 128, 1)\n\n    var cone = new THREE.Mesh(geometry, material)\n\n    cone.applyMatrix(orientation)\n\n    cone.position.x = start.x + dir.x * length / 2\n    cone.position.y = start.y + dir.y * length / 2\n    cone.position.z = start.z + dir.z * length / 2\n\n    this.viewer.impl.addOverlay(\n      this.overlayScene, cone)\n\n    return cone\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Draw one axis\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  createAxis (start, dir, size, color) {\n\n    var end = {\n      x: start.x + dir.x * size,\n      y: start.y + dir.y * size,\n      z: start.z + dir.z * size\n    }\n\n    var material = new THREE.LineBasicMaterial({\n      color: color,\n      linewidth: 3,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    })\n\n    this.createLine(\n      start, end, material)\n\n    this.createCone(\n      end, dir, size * 0.1, material)\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Draw a rotate gizmo\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  createGizmo (center, euler, size, radius, color, range, axis) {\n\n    var material = new GizmoMaterial({\n      color: color\n    })\n\n    var subMaterial = new GizmoMaterial({\n      color: color\n    })\n\n    var torusGizmo = new THREE.Mesh(\n      new THREE.TorusGeometry(\n        radius, size, 64, 64, range),\n      material)\n\n    var subTorus = new THREE.Mesh(\n      new THREE.TorusGeometry(\n        radius, size, 64, 64, 2 * Math.PI),\n      subMaterial)\n\n    subTorus.material.highlight(true)\n\n    var transform = new THREE.Matrix4()\n\n    var q = new THREE.Quaternion()\n\n    q.setFromEuler(euler)\n\n    var s = new THREE.Vector3(1, 1, 1)\n\n    transform.compose(center, q, s)\n\n    torusGizmo.applyMatrix(transform)\n\n    subTorus.applyMatrix(transform)\n\n    var plane = this.createBox(\n      this.size * 100,\n      this.size * 100,\n      0.01)\n\n    plane.applyMatrix(transform)\n\n    subTorus.visible = false\n\n    this.viewer.impl.addOverlay(\n      this.overlayScene, torusGizmo)\n\n    this.viewer.impl.addOverlay(\n      this.overlayScene, subTorus)\n\n    torusGizmo.subGizmo = subTorus\n    torusGizmo.plane = plane\n    torusGizmo.axis = axis\n\n    return torusGizmo\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Draw a box\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  createBox (w, h, d) {\n\n    var material = new GizmoMaterial({\n      color: 0x000000\n    })\n\n    var geometry = new THREE.BoxGeometry(w, h, d)\n\n    var box = new THREE.Mesh(\n      geometry, material)\n\n    box.visible = false\n\n    this.viewer.impl.addOverlay(\n      this.overlayScene, box)\n\n    return box\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Draw a sphere\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  createSphere (radius) {\n\n    var material = new GizmoMaterial({\n      color: 0xFFFF00\n    })\n\n    var geometry = new THREE.SphereGeometry(\n      radius, 32, 32)\n\n    var sphere = new THREE.Mesh(\n      geometry, material)\n\n    sphere.visible = false\n\n    this.viewer.impl.addOverlay(\n      this.overlayScene, sphere)\n\n    return sphere\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Creates Raycatser object from the pointer\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  pointerToRaycaster (pointer) {\n\n    var pointerVector = new THREE.Vector3()\n    var pointerDir = new THREE.Vector3()\n    var ray = new THREE.Raycaster()\n\n    var rect = this.domElement.getBoundingClientRect()\n\n    var x = ((pointer.clientX - rect.left) / rect.width) * 2 - 1\n    var y = -((pointer.clientY - rect.top) / rect.height) * 2 + 1\n\n    if (this.camera.isPerspective) {\n\n      pointerVector.set(x, y, 0.5)\n\n      pointerVector.unproject(this.camera)\n\n      ray.set(this.camera.position,\n        pointerVector.sub(\n          this.camera.position).normalize())\n\n    } else {\n\n      pointerVector.set(x, y, -1)\n\n      pointerVector.unproject(this.camera)\n\n      pointerDir.set(0, 0, -1)\n\n      ray.set(pointerVector,\n        pointerDir.transformDirection(\n          this.camera.matrixWorld))\n    }\n\n    return ray\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  onPointerDown (event) {\n\n    var pointer = event.pointers ? event.pointers[ 0 ] : event\n\n    if (pointer.button === 0) {\n\n      var ray = this.pointerToRaycaster(pointer)\n\n      var intersectResults = ray.intersectObjects(\n        this.gizmos, true)\n\n      if (intersectResults.length) {\n\n        this.gizmos.forEach((gizmo) => {\n\n          gizmo.visible = false\n        })\n\n        this.selectedGizmo = intersectResults[0].object\n\n        this.selectedGizmo.subGizmo.visible = true\n\n        this.picker.position.copy(\n          intersectResults[0].point)\n\n        this.angleLine.geometry.vertices[1].copy(\n          intersectResults[0].point)\n\n        this.lastDir = intersectResults[0].point.sub(\n          this.center).normalize()\n\n        this.angleLine.geometry.verticesNeedUpdate = true\n\n        this.angleLine.visible = true\n\n        this.picker.visible = true\n\n      } else {\n\n        this.picker.visible = false\n      }\n\n      this.engaged = this.picker.visible\n\n      this.viewer.impl.sceneUpdated(true)\n    }\n\n    return this.picker.visible\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  onPointerHover (event) {\n\n    var pointer = event.pointers ? event.pointers[ 0 ] : event\n\n    if (this.engaged) {\n\n      var ray = this.pointerToRaycaster(pointer)\n\n      var intersectResults = ray.intersectObjects(\n        [this.selectedGizmo.plane], true)\n\n      if (intersectResults.length) {\n\n        var intersectPoint = intersectResults[0].point\n\n        var dir = intersectPoint.sub(\n          this.center).normalize()\n\n        var cross = new THREE.Vector3()\n\n        cross.crossVectors(this.lastDir, dir)\n\n        var sign = Math.sign(\n          cross.dot(this.selectedGizmo.axis))\n\n        this.emit('rotate', {\n          angle: sign * dir.angleTo(this.lastDir),\n          axis: this.selectedGizmo.axis\n        })\n\n        this.lastDir = dir\n\n        var pickerPoint = new THREE.Vector3(\n          this.center.x + dir.x * this.size * 0.8,\n          this.center.y + dir.y * this.size * 0.8,\n          this.center.z + dir.z * this.size * 0.8)\n\n        this.picker.position.copy(\n          pickerPoint)\n\n        this.angleLine.geometry.vertices[1].copy(\n          pickerPoint)\n      }\n\n      this.angleLine.visible = true\n\n      this.angleLine.geometry.verticesNeedUpdate = true\n\n    } else {\n\n      this.angleLine.visible = false\n\n      var ray = this.pointerToRaycaster(pointer)\n\n      var intersectResults = ray.intersectObjects(\n        this.gizmos, true)\n\n      if (intersectResults.length) {\n\n        this.picker.position.set(\n          intersectResults[ 0 ].point.x,\n          intersectResults[ 0 ].point.y,\n          intersectResults[ 0 ].point.z)\n\n        this.picker.visible = true\n\n      } else {\n\n        this.picker.visible = false\n      }\n    }\n\n    this.viewer.impl.sceneUpdated(true)\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  onPointerUp (event) {\n\n    this.angleLine.visible = false\n\n    this.picker.visible = false\n\n    this.gizmos.forEach((gizmo) => {\n\n      gizmo.visible = true\n      gizmo.subGizmo.visible = false\n    })\n\n    this.viewer.impl.sceneUpdated(true)\n\n    setTimeout(() => {\n      this.engaged = false\n    }, 100)\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  normalize(screenPoint) {\n\n    var viewport = this.viewer.navigation.getScreenViewport()\n\n    var n = {\n      x: (screenPoint.x - viewport.left) / viewport.width,\n      y: (screenPoint.y - viewport.top) / viewport.height\n    }\n\n    return n\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  projectOntoPlane (worldPoint, normal) {\n\n    var dist = normal.dot(worldPoint)\n\n    return new THREE.Vector3(\n      worldPoint.x - dist * normal.x,\n      worldPoint.y - dist * normal.y,\n      worldPoint.z - dist * normal.z)\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  remove () {\n\n    this.viewer.impl.removeOverlayScene(\n      this.overlayScene)\n  }\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Highlightable Gizmo Material\n//\n///////////////////////////////////////////////////////////////////////////////\nclass GizmoMaterial extends THREE.MeshBasicMaterial {\n\n  constructor (parameters) {\n\n    super()\n\n    this.setValues(parameters)\n\n    this.colorInit = this.color.clone()\n    this.opacityInit = this.opacity\n    this.side = THREE.FrontSide\n    this.depthWrite = false\n    this.transparent = true\n    this.depthTest = false\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  highlight (highlighted) {\n\n    if (highlighted) {\n\n      this.color.setRGB(1, 230 / 255, 3 / 255)\n      this.opacity = 1\n\n    } else {\n\n      this.color.copy(this.colorInit)\n      this.opacity = this.opacityInit\n    }\n  }\n}","import RotateControl from './Rotate.Control'\nimport ViewerCommand from 'Viewer.Command'\nimport {\n  getWorldBoundingBox\n} from 'Viewer.Toolkit'\n\nexport default class RotateCommand extends ViewerCommand {\n\n  /////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////\n  constructor (viewer, options = {}) {\n\n    super (viewer, {\n      ...options,\n      commandId: 'Rotate'\n    })\n\n    this.commandTool.on('buttondown', this.onButtonDown)\n    this.commandTool.on('mousemove', this.onMouseMove)\n    this.commandTool.on('buttonup', this.onButtonUp)\n    this.commandTool.on('keydown', this.onKeyDown)\n    this.commandTool.on('keyup', this.onKeyUp)\n\n    this.fullTransform = options.fullTransform\n    this.keys = {}\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  onDeactivate () {\n\n    this.viewer.clearSelection()\n  }\n\n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  setFullTransform (fullTransform) {\n\n    this.fullTransform = fullTransform\n\n    this.viewer.clearSelection()\n  }\n  \n  /////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////\n  setSelection (event) {\n\n    if (this.rotateControl && this.rotateControl.engaged) {\n\n      this.rotateControl.engaged = false\n\n      this.viewer.select(this.selection.dbIdArray)\n\n      return\n    }\n\n    if (!event.selections.length) {\n      return this.hideControl()\n    }\n\n    this.selection = event.selections[0]\n\n    const model = this.selection.model\n\n    if (this.fullTransform) {\n\n      this.selection.fragIdsArray = []\n\n      const fragCount = model.getFragmentList().\n        fragments.fragId2dbId.length\n\n      for (let fragId = 0; fragId < fragCount; ++fragId) {\n\n        this.selection.fragIdsArray.push(fragId)\n      } \n\n      const it = model.getData().instanceTree\n\n      this.selection.dbIdArray = [it.getRootId()]\n    }\n\n    this.drawControl()\n\n    this.viewer.fitToView(this.selection.dbIdArray)\n\n    this.emit('selection', this.selection)\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Selection cleared\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  hideControl (preserveViewerSelection) {\n\n    this.selection = null\n\n    if (this.rotateControl) {\n\n      this.rotateControl.remove()\n\n      this.rotateControl = null\n\n      this.viewer.impl.sceneUpdated(true)\n    }\n\n    this.emit('selection', null)\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Draw rotate control\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  async drawControl () {\n\n    const bbox = await getWorldBoundingBox(\n      this.selection.model,\n      this.selection.dbIdArray)\n \n    this.center = new THREE.Vector3(\n      (bbox.min.x + bbox.max.x) / 2,\n      (bbox.min.y + bbox.max.y) / 2,\n      (bbox.min.z + bbox.max.z) / 2)\n\n    const size = Math.max(\n      bbox.max.x - bbox.min.x,\n      bbox.max.y - bbox.min.y,\n      bbox.max.z - bbox.min.z) * 0.8\n\n    if (this.rotateControl) {\n\n      this.rotateControl.remove()\n    }\n\n    this.rotateControl = new RotateControl(\n      this.viewer, this.center, size)\n\n    this.rotateControl.on('rotate', (data) => {\n\n      this.rotateFragments(\n        this.selection.model,\n        this.selection.fragIdsArray,\n        data.axis,\n        data.angle,\n        this.center)\n\n      this.viewer.impl.sceneUpdated(true)\n    })\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  onButtonDown = (event, button) => {\n\n    if (this.rotateControl) {\n      if (this.rotateControl.onPointerDown(event)) {\n        return true\n      }\n    }\n\n    if (button === 0 && this.keys.Control) {\n\n      this.dragging = true\n\n      this.mousePos = {\n        x: event.clientX,\n        y: event.clientY\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  onButtonUp = (event, button) => {\n\n    if (this.rotateControl) {\n      this.rotateControl.onPointerUp(event)\n    }\n\n    if (button === 0) {\n      this.dragging = false\n    }\n\n    return false\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  onMouseMove = (event) => {\n\n    if (this.rotateControl) {\n      this.rotateControl.onPointerHover(event)\n    }\n\n    if (this.dragging) {\n\n      if (this.selection) {\n\n        const offset = {\n          x: this.mousePos.x - event.clientX,\n          y: event.clientY - this.mousePos.y\n        }\n\n        this.mousePos = {\n          x: event.clientX,\n          y: event.clientY\n        }\n\n        const angle = Math.sqrt(\n          offset.x * offset.x +\n          offset.y * offset.y)\n\n        const sidewaysDirection = new THREE.Vector3()\n        const moveDirection = new THREE.Vector3()\n        const eyeDirection = new THREE.Vector3()\n        const upDirection = new THREE.Vector3()\n        const camera = this.viewer.getCamera()\n        const axis = new THREE.Vector3()\n        const eye = new THREE.Vector3()\n\n        eye.copy(camera.position).sub(camera.target)\n\n        eyeDirection.copy(eye).normalize()\n\n        upDirection.copy(camera.up).normalize()\n\n        sidewaysDirection.crossVectors(\n          upDirection, eyeDirection).normalize()\n\n        upDirection.setLength(offset.y)\n\n        sidewaysDirection.setLength(offset.x)\n\n        moveDirection.copy(\n          upDirection.add(\n            sidewaysDirection))\n\n        axis.crossVectors(moveDirection, eye).normalize()\n\n        this.rotateFragments(\n          this.selection.model,\n          this.selection.fragIdsArray,\n          axis, angle * Math.PI / 180,\n          this.center)\n\n        this.viewer.impl.sceneUpdated(true)\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  onKeyDown = (event, keyCode) => {\n\n    this.keys[event.key] = true\n\n    if (keyCode === 27) { //ESC\n\n      this.deactivate()\n    }\n\n    return false\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  onKeyUp = (event) => {\n    this.keys[event.key] = false\n    return false\n  }\n\n  ///////////////////////////////////////////////////////////////////////////\n  // Rotate selected fragments\n  //\n  ///////////////////////////////////////////////////////////////////////////\n  rotateFragments (model, fragIds, axis, angle, center) {\n\n    var quaternion = new THREE.Quaternion()\n\n    quaternion.setFromAxisAngle(axis, angle)\n\n    fragIds.forEach((fragId, idx) => {\n\n      const fragProxy = this.viewer.impl.getFragmentProxy(\n        model, fragId)\n\n      fragProxy.getAnimTransform()\n\n      const position = new THREE.Vector3(\n        fragProxy.position.x - center.x,\n        fragProxy.position.y - center.y,\n        fragProxy.position.z - center.z)\n\n      position.applyQuaternion(quaternion)\n\n      position.add(center)\n\n      fragProxy.position = position\n\n      fragProxy.quaternion.multiplyQuaternions(\n        quaternion, fragProxy.quaternion)\n\n      if (idx === 0) {\n\n        const euler = new THREE.Euler()\n\n        euler.setFromQuaternion(\n          fragProxy.quaternion, 0)\n\n        this.emit('transform', {\n          dbIds: this.selection.dbIdArray,\n          transform: {\n            rotation: euler\n          },\n          fragIds,\n          model\n        })\n      }\n\n      fragProxy.updateAnimTransform()\n    })\n  }\n}\n\n\n","import Command from './Rotate.Command'\n\nexport default Command\n","import EventsEmitter from 'EventsEmitter'\n\nexport default class CommandTool extends EventsEmitter {\n\n  constructor (viewer, options = {}) {\n\n    super ()\n\n    this.toolName = options.commandId\n\n    viewer.toolController.registerTool(this)\n\n    this.options = options\n\n    this.viewer = viewer\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Tool names\n  //\n  /////////////////////////////////////////////////////////////////\n  getNames () {\n\n    return [this.toolName]\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Tool name\n  //\n  /////////////////////////////////////////////////////////////////\n  getName () {\n\n    return this.toolName\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Activate Tool\n  //\n  /////////////////////////////////////////////////////////////////\n  activate () {\n\n    if (!this.active) {\n\n      this.active = true\n\n      this.viewer.toolController.activateTool(\n        this.toolName)\n\n      this.emit('activate', this)\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Deactivate tool\n  //\n  /////////////////////////////////////////////////////////////////\n  deactivate () {\n\n    if (this.active) {\n\n      this.active = false\n\n      this.viewer.toolController.deactivateTool(\n        this.toolName)\n\n      this.emit('deactivate', this)\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // \n  //\n  /////////////////////////////////////////////////////////////////\n  unregister () {\n\n    this.deactivate ()\n\n    this.off()\n\n    this.viewer.toolController.deregisterTool(this)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleSingleClick (event, button) {\n\n    return this.emit('singleclick', event, button)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleMouseMove (event) {\n\n    return this.emit('mousemove', event)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleKeyDown (event, keyCode) {\n\n    return this.emit('keydown', event, keyCode)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleKeyUp (event, keyCode) {\n\n    return this.emit('keyup', event, keyCode)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleButtonDown (event, keyCode) {\n\n    return this.emit('buttondown', event, keyCode)\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  handleButtonUp (event, keyCode) {\n\n    return this.emit('buttonup', event, keyCode)\n  }\n}\n","import CommandTool from './Viewer.Command.Tool'\nimport EventsEmitter from 'EventsEmitter'\n\nexport default class ViewerCommand extends EventsEmitter {\n\n  constructor (viewer, options = {}) {\n\n    super ()\n\n    this.commandTool = new CommandTool(viewer, options)\n\n    this.commandTool.on('activate', (tool) => {\n\n      this.emit('command.activate', this)\n    })\n\n    this.commandTool.on('deactivate', (tool) => {\n\n      this.emit('command.deactivate', this)\n    })\n\n    this.commandId = options.commandId\n\n    this.options = options\n\n    this.viewer = viewer\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  get active () {\n\n    return this.commandTool.active \n  }\n  \n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  activate () {\n\n    if (!this.commandTool.active) {\n\n      this.commandTool.activate()\n\n      this.onActivate()\n    }\n  }\n\n  onActivate () {\n\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  deactivate () {\n\n    if (this.commandTool.active) {\n\n      this.commandTool.deactivate()\n\n      this.onDeactivate()\n    }\n  }\n\n  onDeactivate () {\n    \n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  terminate () {\n\n    if (this.control) {\n      this.options.parentControl.removeControl(\n        this.control)\n    }\n\n    this.commandTool.unregister()\n     \n    this.off()\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  toggle () {\n\n    this.active\n    ? this.deactivate()\n    : this.activate()\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  createButton(id, className, tooltip, handler) {\n\n    const button = new Autodesk.Viewing.UI.Button(id)\n\n    button.icon.style.fontSize = '24px'\n\n    button.icon.className = className\n\n    button.setToolTip(tooltip)\n\n    button.onClick = handler\n\n    return button\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n  createButtonControl (options) {\n\n    const control = this.createButton(\n      options.id,\n      options.icon,\n      options.caption,\n      options.handler)\n\n    var parentControl = options.parentControl\n\n    if (!parentControl) {\n\n      const viewerToolbar = this.viewer.getToolbar(true)\n\n      parentControl = new Autodesk.Viewing.UI.ControlGroup(\n        options.id)\n\n      viewerToolbar.addControl(parentControl)\n    }\n\n    parentControl.addControl(control)\n\n    return control\n  }\n}\n","import ViewerCommand from './Viewer.Command'\n\nexport default ViewerCommand\n"],"sourceRoot":""}